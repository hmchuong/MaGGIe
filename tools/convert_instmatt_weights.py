import torch

state_dict = torch.load("/home/chuongh/InstMatt/checkpoints/best_model.pth")
state_dict = state_dict["state_dict"]

state_dict = {k.replace("module.", ""): v for k, v in state_dict.items()}

missing_keys = ['encoder.conv1.module.weight_u', 'encoder.conv1.module.weight_v', 'encoder.conv1.module.weight_bar', 'encoder.conv2.module.weight_u', 'encoder.conv2.module.weight_v', 'encoder.conv2.module.weight_bar', 'encoder.conv3.module.weight_u', 'encoder.conv3.module.weight_v', 'encoder.conv3.module.weight_bar', 'encoder.layer1.0.conv1.module.weight_u', 'encoder.layer1.0.conv1.module.weight_v', 'encoder.layer1.0.conv1.module.weight_bar', 'encoder.layer1.0.conv2.module.weight_u', 'encoder.layer1.0.conv2.module.weight_v', 'encoder.layer1.0.conv2.module.weight_bar', 'encoder.layer1.1.conv1.module.weight_u', 'encoder.layer1.1.conv1.module.weight_v', 'encoder.layer1.1.conv1.module.weight_bar', 'encoder.layer1.1.conv2.module.weight_u', 'encoder.layer1.1.conv2.module.weight_v', 'encoder.layer1.1.conv2.module.weight_bar', 'encoder.layer1.2.conv1.module.weight_u', 'encoder.layer1.2.conv1.module.weight_v', 'encoder.layer1.2.conv1.module.weight_bar', 'encoder.layer1.2.conv2.module.weight_u', 'encoder.layer1.2.conv2.module.weight_v', 'encoder.layer1.2.conv2.module.weight_bar', 'encoder.layer2.0.conv1.module.weight_u', 'encoder.layer2.0.conv1.module.weight_v', 'encoder.layer2.0.conv1.module.weight_bar', 'encoder.layer2.0.conv2.module.weight_u', 'encoder.layer2.0.conv2.module.weight_v', 'encoder.layer2.0.conv2.module.weight_bar', 'encoder.layer2.0.downsample.1.module.weight_u', 'encoder.layer2.0.downsample.1.module.weight_v', 'encoder.layer2.0.downsample.1.module.weight_bar', 'encoder.layer2.1.conv1.module.weight_u', 'encoder.layer2.1.conv1.module.weight_v', 'encoder.layer2.1.conv1.module.weight_bar', 'encoder.layer2.1.conv2.module.weight_u', 'encoder.layer2.1.conv2.module.weight_v', 'encoder.layer2.1.conv2.module.weight_bar', 'encoder.layer2.2.conv1.module.weight_u', 'encoder.layer2.2.conv1.module.weight_v', 'encoder.layer2.2.conv1.module.weight_bar', 'encoder.layer2.2.conv2.module.weight_u', 'encoder.layer2.2.conv2.module.weight_v', 'encoder.layer2.2.conv2.module.weight_bar', 'encoder.layer2.3.conv1.module.weight_u', 'encoder.layer2.3.conv1.module.weight_v', 'encoder.layer2.3.conv1.module.weight_bar', 'encoder.layer2.3.conv2.module.weight_u', 'encoder.layer2.3.conv2.module.weight_v', 'encoder.layer2.3.conv2.module.weight_bar', 'encoder.layer3.0.conv1.module.weight_u', 'encoder.layer3.0.conv1.module.weight_v', 'encoder.layer3.0.conv1.module.weight_bar', 'encoder.layer3.0.conv2.module.weight_u', 'encoder.layer3.0.conv2.module.weight_v', 'encoder.layer3.0.conv2.module.weight_bar', 'encoder.layer3.0.downsample.1.module.weight_u', 'encoder.layer3.0.downsample.1.module.weight_v', 'encoder.layer3.0.downsample.1.module.weight_bar', 'encoder.layer3.1.conv1.module.weight_u', 'encoder.layer3.1.conv1.module.weight_v', 'encoder.layer3.1.conv1.module.weight_bar', 'encoder.layer3.1.conv2.module.weight_u', 'encoder.layer3.1.conv2.module.weight_v', 'encoder.layer3.1.conv2.module.weight_bar', 'encoder.layer3.2.conv1.module.weight_u', 'encoder.layer3.2.conv1.module.weight_v', 'encoder.layer3.2.conv1.module.weight_bar', 'encoder.layer3.2.conv2.module.weight_u', 'encoder.layer3.2.conv2.module.weight_v', 'encoder.layer3.2.conv2.module.weight_bar', 'encoder.layer3.3.conv1.module.weight_u', 'encoder.layer3.3.conv1.module.weight_v', 'encoder.layer3.3.conv1.module.weight_bar', 'encoder.layer3.3.conv2.module.weight_u', 'encoder.layer3.3.conv2.module.weight_v', 'encoder.layer3.3.conv2.module.weight_bar', 'encoder.layer_bottleneck.0.conv1.module.weight_u', 'encoder.layer_bottleneck.0.conv1.module.weight_v', 'encoder.layer_bottleneck.0.conv1.module.weight_bar', 'encoder.layer_bottleneck.0.conv2.module.weight_u', 'encoder.layer_bottleneck.0.conv2.module.weight_v', 'encoder.layer_bottleneck.0.conv2.module.weight_bar', 'encoder.layer_bottleneck.0.downsample.1.module.weight_u', 'encoder.layer_bottleneck.0.downsample.1.module.weight_v', 'encoder.layer_bottleneck.0.downsample.1.module.weight_bar', 'encoder.layer_bottleneck.1.conv1.module.weight_u', 'encoder.layer_bottleneck.1.conv1.module.weight_v', 'encoder.layer_bottleneck.1.conv1.module.weight_bar', 'encoder.layer_bottleneck.1.conv2.module.weight_u', 'encoder.layer_bottleneck.1.conv2.module.weight_v', 'encoder.layer_bottleneck.1.conv2.module.weight_bar', 'encoder.shortcut.0.0.module.weight_u', 'encoder.shortcut.0.0.module.weight_v', 'encoder.shortcut.0.0.module.weight_bar', 'encoder.shortcut.0.3.module.weight_u', 'encoder.shortcut.0.3.module.weight_v', 'encoder.shortcut.0.3.module.weight_bar', 'encoder.shortcut.1.0.module.weight_u', 'encoder.shortcut.1.0.module.weight_v', 'encoder.shortcut.1.0.module.weight_bar', 'encoder.shortcut.1.3.module.weight_u', 'encoder.shortcut.1.3.module.weight_v', 'encoder.shortcut.1.3.module.weight_bar', 'encoder.shortcut.2.0.module.weight_u', 'encoder.shortcut.2.0.module.weight_v', 'encoder.shortcut.2.0.module.weight_bar', 'encoder.shortcut.2.3.module.weight_u', 'encoder.shortcut.2.3.module.weight_v', 'encoder.shortcut.2.3.module.weight_bar', 'encoder.shortcut.3.0.module.weight_u', 'encoder.shortcut.3.0.module.weight_v', 'encoder.shortcut.3.0.module.weight_bar', 'encoder.shortcut.3.3.module.weight_u', 'encoder.shortcut.3.3.module.weight_v', 'encoder.shortcut.3.3.module.weight_bar', 'encoder.shortcut.4.0.module.weight_u', 'encoder.shortcut.4.0.module.weight_v', 'encoder.shortcut.4.0.module.weight_bar', 'encoder.shortcut.4.3.module.weight_u', 'encoder.shortcut.4.3.module.weight_v', 'encoder.shortcut.4.3.module.weight_bar', 'decoder.conv1.module.weight_u', 'decoder.conv1.module.weight_v', 'decoder.conv1.module.weight_bar', 'decoder.layer1.0.conv1.module.weight_u', 'decoder.layer1.0.conv1.module.weight_v', 'decoder.layer1.0.conv1.module.weight_bar', 'decoder.layer1.0.conv2.module.weight_u', 'decoder.layer1.0.conv2.module.weight_v', 'decoder.layer1.0.conv2.module.weight_bar', 'decoder.layer1.0.upsample.1.module.weight_u', 'decoder.layer1.0.upsample.1.module.weight_v', 'decoder.layer1.0.upsample.1.module.weight_bar', 'decoder.layer1.1.conv1.module.weight_u', 'decoder.layer1.1.conv1.module.weight_v', 'decoder.layer1.1.conv1.module.weight_bar', 'decoder.layer1.1.conv2.module.weight_u', 'decoder.layer1.1.conv2.module.weight_v', 'decoder.layer1.1.conv2.module.weight_bar', 'decoder.layer2.0.conv1.module.weight_u', 'decoder.layer2.0.conv1.module.weight_v', 'decoder.layer2.0.conv1.module.weight_bar', 'decoder.layer2.0.conv2.module.weight_u', 'decoder.layer2.0.conv2.module.weight_v', 'decoder.layer2.0.conv2.module.weight_bar', 'decoder.layer2.0.upsample.1.module.weight_u', 'decoder.layer2.0.upsample.1.module.weight_v', 'decoder.layer2.0.upsample.1.module.weight_bar', 'decoder.layer2.1.conv1.module.weight_u', 'decoder.layer2.1.conv1.module.weight_v', 'decoder.layer2.1.conv1.module.weight_bar', 'decoder.layer2.1.conv2.module.weight_u', 'decoder.layer2.1.conv2.module.weight_v', 'decoder.layer2.1.conv2.module.weight_bar', 'decoder.layer2.2.conv1.module.weight_u', 'decoder.layer2.2.conv1.module.weight_v', 'decoder.layer2.2.conv1.module.weight_bar', 'decoder.layer2.2.conv2.module.weight_u', 'decoder.layer2.2.conv2.module.weight_v', 'decoder.layer2.2.conv2.module.weight_bar', 'decoder.layer3.0.conv1.module.weight_u', 'decoder.layer3.0.conv1.module.weight_v', 'decoder.layer3.0.conv1.module.weight_bar', 'decoder.layer3.0.conv2.module.weight_u', 'decoder.layer3.0.conv2.module.weight_v', 'decoder.layer3.0.conv2.module.weight_bar', 'decoder.layer3.0.upsample.1.module.weight_u', 'decoder.layer3.0.upsample.1.module.weight_v', 'decoder.layer3.0.upsample.1.module.weight_bar', 'decoder.layer3.1.conv1.module.weight_u', 'decoder.layer3.1.conv1.module.weight_v', 'decoder.layer3.1.conv1.module.weight_bar', 'decoder.layer3.1.conv2.module.weight_u', 'decoder.layer3.1.conv2.module.weight_v', 'decoder.layer3.1.conv2.module.weight_bar', 'decoder.layer3.2.conv1.module.weight_u', 'decoder.layer3.2.conv1.module.weight_v', 'decoder.layer3.2.conv1.module.weight_bar', 'decoder.layer3.2.conv2.module.weight_u', 'decoder.layer3.2.conv2.module.weight_v', 'decoder.layer3.2.conv2.module.weight_bar', 'decoder.layer4.0.conv1.module.weight_u', 'decoder.layer4.0.conv1.module.weight_v', 'decoder.layer4.0.conv1.module.weight_bar', 'decoder.layer4.0.conv2.module.weight_u', 'decoder.layer4.0.conv2.module.weight_v', 'decoder.layer4.0.conv2.module.weight_bar', 'decoder.layer4.0.upsample.1.module.weight_u', 'decoder.layer4.0.upsample.1.module.weight_v', 'decoder.layer4.0.upsample.1.module.weight_bar', 'decoder.layer4.1.conv1.module.weight_u', 'decoder.layer4.1.conv1.module.weight_v', 'decoder.layer4.1.conv1.module.weight_bar', 'decoder.layer4.1.conv2.module.weight_u', 'decoder.layer4.1.conv2.module.weight_v', 'decoder.layer4.1.conv2.module.weight_bar']

for key in missing_keys:
    if key.replace(".module.", ".") in state_dict:
        state_dict[key] = state_dict[key.replace(".module.", ".")]
        del state_dict[key.replace(".module.", ".")]
    else:
        import pdb; pdb.set_trace()

torch.save(state_dict, "../pretrain/instmatt.pth")
import pdb; pdb.set_trace()